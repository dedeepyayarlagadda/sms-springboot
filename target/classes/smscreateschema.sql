CREATE TABLE IF NOT EXISTS DEPARTMENT (
    DEPARTMENT_ID INT AUTO_INCREMENT PRIMARY KEY,
    DEPARTMENT_NAME VARCHAR(64) UNIQUE NOT NULL,
    DEPARTMENT_HEAD VARCHAR(32),
    DEPARTMENT_TYPE CHAR(2),
    ESTABLISHED_YEAR YEAR,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS STUDENT (
    STUDENT_ID INT AUTO_INCREMENT PRIMARY KEY,
    FIRST_NAME VARCHAR(32) NOT NULL,
    LAST_NAME VARCHAR(32) NOT NULL,
    FATHER_NAME VARCHAR(64) NOT NULL,
    MOTHER_NAME VARCHAR(64) NOT NULL,
    GENDER ENUM('M','F','T') NOT NULL,
    DOB DATE NOT NULL, 
    STUDENT_PHONE VARCHAR(15),
    CHECK(STUDENT_PHONE REGEXP '^[+]?([0-9\-() ]+)$'),
    FATHER_PHONE VARCHAR(15),
    CHECK(FATHER_PHONE REGEXP '^[+]?([0-9\-() ]+)$'),
    BLOOD_GROUP ENUM('O+','O-','A+','A-','B+','B-','AB+','AB-'),
    EMAIL VARCHAR(128),
    IDENTITY_TYPE CHAR(4),
    IDENTITY_NUMBER VARCHAR(20) UNIQUE,
    TAX_ID VARCHAR(20),
    STIPEND BIGINT,
    ACCOUNT_ID VARCHAR(26),    
    DOJ DATE NOT NULL,
    DEPARTMENT_ID INT NOT NULL,
    CREATED_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
    MODIFIED_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,    
    CONSTRAINT STUDENT_FK FOREIGN KEY (DEPARTMENT_ID) 
    REFERENCES DEPARTMENT(DEPARTMENT_ID) ON DELETE CASCADE
);

create table ADDRESS(
  ADDRESS_ID SERIAL NOT NULL PRIMARY KEY,
  ADDRESS1 VARCHAR(50) NOT NULL,
  ADDRESS2 VARCHAR(50)
  CITY VARCHAR(50) NOT NULL,
  STATE VARCHAR(64) NOT NULL,
  COUNTRY VARCHAR(90) NOT NULL,
  POSTAL_CODE INT NOT NULL,
  STUDENT_ID INT,
  FOREIGN KEY(STUDENT_ID) REFERENCES STUDENT(STUDENT_ID)
);

CREATE INDEX STUDENT_NAME_IDX ON STUDENT(FIRST_NAME, LAST_NAME);

CREATE TABLE IF NOT EXISTS COURSE (
    COURSE_ID INT AUTO_INCREMENT PRIMARY KEY,
    COURSE_NAME VARCHAR(64) NOT NULL,
    COURSE_CODE VARCHAR(10) UNIQUE NOT NULL,
    CREDITS INT NOT NULL,
    IS_ELECTIVE BOOLEAN
);

CREATE TABLE IF NOT EXISTS STUDENT_COURSE (
    STUDENT_ID INT,
    COURSE_ID INT,
    ENROLL_DATE DATE,
    CONSTRAINT STUDENTCOURSE_FK1 FOREIGN KEY (STUDENT_ID) 
    REFERENCES STUDENT(STUDENT_ID) ON DELETE CASCADE,
    CONSTRAINT STUDENTCOURSE_FK2 FOREIGN KEY (COURSE_ID) 
    REFERENCES COURSE(COURSE_ID) ON DELETE CASCADE,
    PRIMARY KEY (STUDENT_ID, COURSE_ID)
);
